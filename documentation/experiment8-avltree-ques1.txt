class Node:
    def init:
        self.data, left, right, height = 1

class AVLTree:
    def init:
        root = None

    def height:
        return node.height if node else 0

    def getbalance:
        return height(node.left) - height(node.right)

    def rightrotate:
        y = z.left
        T3 = y.right

        y.right = z
        z.left = T3

        z.height = 1 + max(height(z.left), height(z.right))
        y.height = 1 + max(height(y.left), height(y.right))

        return y

    def leftrotate:
        y = z.right
        T2 = y.left

        y.left = z
        z.right = T2

        z.height = 1 + max(height(z.left), height(z.right))
        y.height = 1 + max(height(y.left), height(y.right))

        return y

    def insert:
        if data < root.data:
            left = insert(left, data)
        elif data > root.data:
            right = insert(right, data)
        else:
            return root  

        root.height = 1 + max(height(root.left), height(root.right))

        balance = getbalance(root)

        if balance > 1 and data < left.data:
            return rightrotate(root)

        if balance < -1 and data > root.right.data:
            return eftrotate(root)

        if balance > 1 and data > root.left.data:
            root.left = leftrotate(root.left)
            return rightrotate(root)

        if balance < -1 and data < root.right.data:
            root.right = rightrotate(root.right)
            return leftrotate(root)
        return root

    def inorder:
        if root:
            inorder(root.left)
            print(root.data)
            inorder(root.right)

__main__:
    elements = ["Z", "I", "J", "F", "A", "E", "C", "P", "B", "D", "H", "N"]
    elements.sort() 

    avl = AVLTree()
    root = None

    for element in elements:
        root = avl.insert(root, element)

    avl.in_order(root)
